}
##### main loop
savedat <- matrix(0, nrow = filNum, ncol = 12)
if(mode=="folder" || mode=="scraping") {
cat(paste0("Processing ", datfil[f], "(", f, "/", filNum, ")", "...\n"))
}
##### read dat
if(mode=="scraping")  setwd(paste0(current, "/scraping"))
if(mode=="folder") {
if(grepl(".jpg",  datfil[f], fixed = TRUE))   type <- ".jpg"
if(grepl(".jpeg", datfil[f], fixed = TRUE))   type <- ".jpeg"
if(grepl(".png",  datfil[f], fixed = TRUE))   type <- ".png"
}
if(type==".jpg" || type==".jpeg")   img <- jpeg::readJPEG(datfil[f])
if(type==".png")                    img <- png::readPNG(datfil[f])
##### thumbnail rescale (under 90000 pixel)
dim1 <- dim(img)[1]; dim2 <- dim(img)[2]
if(dim1>300 && dim2>300) {
while(dim1 > 200)  dim1 <- dim1 / 2
while(dim2 > 200)  dim2 <- dim2 / 2
resizep <- 1 / min(dim(img)[1] / dim1, dim(img)[2] / dim2)
redp   <- mmand::rescale(img[,,1], resizep, mmand::mnKernel())
greenp <- mmand::rescale(img[,,2], resizep, mmand::mnKernel())
bluep  <- mmand::rescale(img[,,3], resizep, mmand::mnKernel())
imgp <- array(0, dim = c(dim(redp)[1], dim(redp)[2], 3))
imgp[,,1] <- redp; imgp[,,2] <- greenp; imgp[,,3] <- bluep;
imgp <- (imgp - min(imgp)) / (max(imgp) - min(imgp))
} else {
imgp <- img
}
##### HSV calculate
dat <- array(0, c(nrow(img), ncol(img), 3))
if(nrow(img) < ncol(img)) {
for(i in 1:ncol(img))   dat[,i,] <- t(rgb2hsv(t(img[,i,1:3]), maxColorValue=1))
} else {
for(i in 1:nrow(img))   dat[i,,] <- t(rgb2hsv(t(img[i,,1:3]), maxColorValue=1))
}
val <- c("Hue", "Saturation", "Brightness")
if(resize) {
dat2 <- array(0, dim = c(dim(dat)[1]*resize, dim(dat)[2]*resize, 3))
dat2[,,1] <- mmand::rescale(dat[,,1], resize, mmand::mnKernel())
dat2[,,2] <- mmand::rescale(dat[,,2], resize, mmand::mnKernel())
dat2[,,3] <- mmand::rescale(dat[,,3], resize, mmand::mnKernel())
dat <- dat2
}
##### color settings
v <- .8; leg <- c(0, .5, 1)
#pals <- c("red","yellow","green","cyan","blue","magenta", "red")
pals <- c(hsv(0, 1, v), hsv(1/6, 1, v), hsv(2*(1/6), 1, v), hsv(3*(1/6), 1, v),
hsv(4*(1/6), 1, v), hsv(5*(1/6), 1, v), hsv(1, 1, v))
##### print settings
if(mode=="scraping")  setwd(current)
##### plot loop
p <- list(); imgall <- NULL; maxval <- NULL
for(i in 1:3) {
###### stastics
imgdat <- tidyr::gather(data.frame(dat[,,i]), pixel, value)
if((endoff) && (i!=1)) {
imgval <- imgdat$value[(0.01 <imgdat$value) & (imgdat$value < 0.99)]
} else {
imgval <- imgdat$value
}
imgsta <- c(mean(imgval), sd(imgval), e1071::skewness(imgval, type=2), e1071::kurtosis(imgval, type=2))
imgall <- c(imgall, imgsta)
if(i==1) {
dist <- table(cut(imgval, seq(0, 1, 1/70)), imgval)
maxdist <- as.numeric(which.max(rowSums(modeval)))
maxhue <- ((1/70 * maxdist) + (1/70 * (maxdist-1))) / 2
}
##### histgram
if(hist!=FALSE) {
g <- ggplot2::ggplot(imgdat, ggplot2::aes(x=value, fill=..x..)) +
ggplot2::stat_bin(binwidth = 1/70) +
ggplot2::ylab("Number of pixels") + ggplot2::xlab(val[i]) +
ggplot2::xlim(0, 1) + ggplot2::theme_bw(base_size=16) +
ggplot2::theme(legend.position="bottom", legend.title=ggplot2::element_blank(),
plot.title=ggplot2::element_text(size=14)) +
ggplot2::ggtitle(paste0("Mean = ",round(imgsta[1],2), ", SD = ",round(imgsta[2],2), "   ",
"\nSkew = ",round(imgsta[3],2), ", Kurt = ",round(imgsta[4],2)))
if     (i==1)  g <- g + ggplot2::scale_fill_gradientn(colours=pals, breaks=leg, labels=leg, limits=c(0, 1))
else if(i==2)  g <- g + ggplot2::scale_fill_gradient(low=hsv(maxhue, 0, v), high=hsv(maxhue, 1, v), breaks=leg, labels=leg)
else           g <- g + ggplot2::scale_fill_gradient(low=hsv(maxhue, 1, 0), high=hsv(maxhue, 1, 1), breaks=leg, labels=leg)
if((dim(dat)[1]*dim(dat)[2]) > 1e+06) {
g <- g + ggplot2::scale_y_continuous(labels=scales::scientific_format())
} else {
g <- g + ggplot2::scale_y_continuous(labels=scales::comma_format())
}
p <- c(p, list(g))
}
}
savedat[f,] <- imgall
dist <- table(cut(imgval, seq(0, 1, 1/70)), imgval)
maxdist <- as.numeric(which.max(rowSums(dist)))
maxhue <- ((1/70 * maxdist) + (1/70 * (maxdist-1))) / 2
seq(0, 1, 1/70)
p <- list(); imgall <- NULL; maxval <- NULL
for(i in 1:3) {
###### stastics
imgdat <- tidyr::gather(data.frame(dat[,,i]), pixel, value)
if((endoff) && (i!=1)) {
imgval <- imgdat$value[(0.01 <imgdat$value) & (imgdat$value < 0.99)]
} else {
imgval <- imgdat$value
}
imgsta <- c(mean(imgval), sd(imgval), e1071::skewness(imgval, type=2), e1071::kurtosis(imgval, type=2))
imgall <- c(imgall, imgsta)
if(i==1) {
dist <- table(cut(imgval, seq(0, 1, 1/70)), imgval)
maxdist <- as.numeric(which.max(rowSums(dist)))
maxhue <- ((1/70 * maxdist) + (1/70 * (maxdist-1))) / 2
}
##### histgram
if(hist!=FALSE) {
g <- ggplot2::ggplot(imgdat, ggplot2::aes(x=value, fill=..x..)) +
ggplot2::stat_bin(binwidth = 1/70) +
ggplot2::ylab("Number of pixels") + ggplot2::xlab(val[i]) +
ggplot2::xlim(0, 1) + ggplot2::theme_bw(base_size=16) +
ggplot2::theme(legend.position="bottom", legend.title=ggplot2::element_blank(),
plot.title=ggplot2::element_text(size=14)) +
ggplot2::ggtitle(paste0("Mean = ",round(imgsta[1],2), ", SD = ",round(imgsta[2],2), "   ",
"\nSkew = ",round(imgsta[3],2), ", Kurt = ",round(imgsta[4],2)))
if     (i==1)  g <- g + ggplot2::scale_fill_gradientn(colours=pals, breaks=leg, labels=leg, limits=c(0, 1))
else if(i==2)  g <- g + ggplot2::scale_fill_gradient(low=hsv(maxhue, 0, v), high=hsv(maxhue, 1, v), breaks=leg, labels=leg)
else           g <- g + ggplot2::scale_fill_gradient(low=hsv(maxhue, 1, 0), high=hsv(maxhue, 1, 1), breaks=leg, labels=leg)
if((dim(dat)[1]*dim(dat)[2]) > 1e+06) {
g <- g + ggplot2::scale_y_continuous(labels=scales::scientific_format())
} else {
g <- g + ggplot2::scale_y_continuous(labels=scales::comma_format())
}
p <- c(p, list(g))
}
}
savedat[f,] <- imgall
if(hist!=FALSE) {
##### multiple plot
grid::grid.newpage()
grid::pushViewport(grid::viewport(layout = grid::grid.layout(2, 3, heights = grid::unit(c(1, 9), "null"))))
print(p[[1]], vp = grid::viewport(layout.pos.row = 2, layout.pos.col = 1))
print(p[[2]], vp = grid::viewport(layout.pos.row = 2, layout.pos.col = 2))
print(p[[3]], vp = grid::viewport(layout.pos.row = 2, layout.pos.col = 3))
grid::grid.text(datfil[f], vp=grid::viewport(layout.pos.row=1, layout.pos.col=2:3),
gp=grid::gpar(fontsize=35, fontfamily = "Meiryo"))
grid::pushViewport(grid::viewport(layout.pos.row=1, layout.pos.col=1, just=c('centre','top')))
grid::grid.draw(grid::rasterGrob(imgp, interpolate=TRUE))
}
library(imhistR)
p <- list(); imgall <- NULL; maxval <- NULL
for(i in 1:3) {
###### stastics
imgdat <- tidyr::gather(data.frame(dat[,,i]), pixel, value)
if((endoff) && (i!=1)) {
imgval <- imgdat$value[(0.01 <imgdat$value) & (imgdat$value < 0.99)]
} else {
imgval <- imgdat$value
}
imgsta <- c(mean(imgval), sd(imgval), e1071::skewness(imgval, type=2), e1071::kurtosis(imgval, type=2))
imgall <- c(imgall, imgsta)
if(i==1) {
dist <- table(cut(imgval, seq(0, 1, 1/70)), imgval)
maxdist <- as.numeric(which.max(rowSums(dist)))
maxhue <- ((1/70 * maxdist) + (1/70 * (maxdist-1))) / 2
}
##### histgram
if(hist!=FALSE) {
g <- ggplot2::ggplot(imgdat, ggplot2::aes(x=value, fill=..x..)) +
ggplot2::stat_bin(binwidth = 1/70) +
ggplot2::ylab("Number of pixels") + ggplot2::xlab(val[i]) +
ggplot2::xlim(0, 1) + ggplot2::theme_bw(base_size=16) +
ggplot2::theme(legend.position="bottom", legend.title=ggplot2::element_blank(),
plot.title=ggplot2::element_text(size=14)) +
ggplot2::ggtitle(paste0("Mean = ",round(imgsta[1],2), ", SD = ",round(imgsta[2],2), "   ",
"\nSkew = ",round(imgsta[3],2), ", Kurt = ",round(imgsta[4],2)))
if     (i==1)  g <- g + ggplot2::scale_fill_gradientn(colours=pals, breaks=leg, labels=leg, limits=c(0, 1))
else if(i==2)  g <- g + ggplot2::scale_fill_gradient(low=hsv(maxhue, 0, v), high=hsv(maxhue, 1, v), breaks=leg, labels=leg)
else           g <- g + ggplot2::scale_fill_gradient(low=hsv(maxhue, 1, 0), high=hsv(maxhue, 1, 1), breaks=leg, labels=leg)
if((dim(dat)[1]*dim(dat)[2]) > 1e+06) {
g <- g + ggplot2::scale_y_continuous(formatter=comma)#labels=scales::scientific_format())
} else {
g <- g + ggplot2::scale_y_continuous(formatter=comma)#labels=scales::comma_format())
}
p <- c(p, list(g))
}
}
savedat[f,] <- imgall
if(hist!=FALSE) {
##### multiple plot
grid::grid.newpage()
grid::pushViewport(grid::viewport(layout = grid::grid.layout(2, 3, heights = grid::unit(c(1, 9), "null"))))
print(p[[1]], vp = grid::viewport(layout.pos.row = 2, layout.pos.col = 1))
print(p[[2]], vp = grid::viewport(layout.pos.row = 2, layout.pos.col = 2))
print(p[[3]], vp = grid::viewport(layout.pos.row = 2, layout.pos.col = 3))
grid::grid.text(datfil[f], vp=grid::viewport(layout.pos.row=1, layout.pos.col=2:3),
gp=grid::gpar(fontsize=35, fontfamily = "Meiryo"))
grid::pushViewport(grid::viewport(layout.pos.row=1, layout.pos.col=1, just=c('centre','top')))
grid::grid.draw(grid::rasterGrob(imgp, interpolate=TRUE))
}
p <- list(); imgall <- NULL; maxval <- NULL
for(i in 1:3) {
###### stastics
imgdat <- tidyr::gather(data.frame(dat[,,i]), pixel, value)
if((endoff) && (i!=1)) {
imgval <- imgdat$value[(0.01 <imgdat$value) & (imgdat$value < 0.99)]
} else {
imgval <- imgdat$value
}
imgsta <- c(mean(imgval), sd(imgval), e1071::skewness(imgval, type=2), e1071::kurtosis(imgval, type=2))
imgall <- c(imgall, imgsta)
if(i==1) {
dist <- table(cut(imgval, seq(0, 1, 1/70)), imgval)
maxdist <- as.numeric(which.max(rowSums(dist)))
maxhue <- ((1/70 * maxdist) + (1/70 * (maxdist-1))) / 2
}
##### histgram
if(hist!=FALSE) {
g <- ggplot2::ggplot(imgdat, ggplot2::aes(x=value, fill=..x..)) +
ggplot2::stat_bin(binwidth = 1/70) +
ggplot2::ylab("Number of pixels") + ggplot2::xlab(val[i]) +
ggplot2::xlim(0, 1) + ggplot2::theme_bw(base_size=16) +
ggplot2::theme(legend.position="bottom", legend.title=ggplot2::element_blank(),
plot.title=ggplot2::element_text(size=14)) +
ggplot2::ggtitle(paste0("Mean = ",round(imgsta[1],2), ", SD = ",round(imgsta[2],2), "   ",
"\nSkew = ",round(imgsta[3],2), ", Kurt = ",round(imgsta[4],2)))
if     (i==1)  g <- g + ggplot2::scale_fill_gradientn(colours=pals, breaks=leg, labels=leg, limits=c(0, 1))
else if(i==2)  g <- g + ggplot2::scale_fill_gradient(low=hsv(maxhue, 0, v), high=hsv(maxhue, 1, v), breaks=leg, labels=leg)
else           g <- g + ggplot2::scale_fill_gradient(low=hsv(maxhue, 1, 0), high=hsv(maxhue, 1, 1), breaks=leg, labels=leg)
if((dim(dat)[1]*dim(dat)[2]) > 1e+06) {
g <- g + ggplot2::scale_y_continuous(labels=comma)#labels=scales::scientific_format())
} else {
g <- g + ggplot2::scale_y_continuous(labels=comma)#labels=scales::comma_format())
}
p <- c(p, list(g))
}
}
g <- g + ggplot2::scale_y_continuous(labels=comma)#labels=scales::scientific_format())
p <- list(); imgall <- NULL; maxval <- NULL
for(i in 1:3) {
###### stastics
imgdat <- tidyr::gather(data.frame(dat[,,i]), pixel, value)
if((endoff) && (i!=1)) {
imgval <- imgdat$value[(0.01 <imgdat$value) & (imgdat$value < 0.99)]
} else {
imgval <- imgdat$value
}
imgsta <- c(mean(imgval), sd(imgval), e1071::skewness(imgval, type=2), e1071::kurtosis(imgval, type=2))
imgall <- c(imgall, imgsta)
if(i==1) {
dist <- table(cut(imgval, seq(0, 1, 1/70)), imgval)
maxdist <- as.numeric(which.max(rowSums(dist)))
maxhue <- ((1/70 * maxdist) + (1/70 * (maxdist-1))) / 2
}
##### histgram
if(hist!=FALSE) {
g <- ggplot2::ggplot(imgdat, ggplot2::aes(x=value, fill=..x..)) +
ggplot2::stat_bin(binwidth = 1/70) +
ggplot2::ylab("Number of pixels") + ggplot2::xlab(val[i]) +
ggplot2::xlim(0, 1) + ggplot2::theme_bw(base_size=16) +
ggplot2::theme(legend.position="bottom", legend.title=ggplot2::element_blank(),
plot.title=ggplot2::element_text(size=14)) +
ggplot2::ggtitle(paste0("Mean = ",round(imgsta[1],2), ", SD = ",round(imgsta[2],2), "   ",
"\nSkew = ",round(imgsta[3],2), ", Kurt = ",round(imgsta[4],2)))
if     (i==1)  g <- g + ggplot2::scale_fill_gradientn(colours=pals, breaks=leg, labels=leg, limits=c(0, 1))
else if(i==2)  g <- g + ggplot2::scale_fill_gradient(low=hsv(maxhue, 0, v), high=hsv(maxhue, 1, v), breaks=leg, labels=leg)
else           g <- g + ggplot2::scale_fill_gradient(low=hsv(maxhue, 1, 0), high=hsv(maxhue, 1, 1), breaks=leg, labels=leg)
if((dim(dat)[1]*dim(dat)[2]) > 1e+06) {
g <- g + ggplot2::scale_y_continuous(labels=scales::scientific_format())
} else {
g <- g + ggplot2::scale_y_continuous(labels=scales::comma_format())
}
p <- c(p, list(g))
}
}
savedat[f,] <- imgall
if(hist!=FALSE) {
##### multiple plot
grid::grid.newpage()
grid::pushViewport(grid::viewport(layout = grid::grid.layout(2, 3, heights = grid::unit(c(1, 9), "null"))))
print(p[[1]], vp = grid::viewport(layout.pos.row = 2, layout.pos.col = 1))
print(p[[2]], vp = grid::viewport(layout.pos.row = 2, layout.pos.col = 2))
print(p[[3]], vp = grid::viewport(layout.pos.row = 2, layout.pos.col = 3))
grid::grid.text(datfil[f], vp=grid::viewport(layout.pos.row=1, layout.pos.col=2:3),
gp=grid::gpar(fontsize=35, fontfamily = "Meiryo"))
grid::pushViewport(grid::viewport(layout.pos.row=1, layout.pos.col=1, just=c('centre','top')))
grid::grid.draw(grid::rasterGrob(imgp, interpolate=TRUE))
}
library(imhistR)
library(imhistR)
getwd()
setwd("/Users/morikazuma/OneDrive/R_code/imageProcessing")
url <- "http://www.r-project.org/Rlogo.png"
lrgbhist(input=url, mode="url")
library(imhistR)
url <- "http://www.r-project.org/Rlogo.png"
lrgbhist(input=url, mode="url")
library(imhistR)
url <- "http://www.r-project.org/Rlogo.png"
lrgbhist(input=url, mode="url")
library(imhistR)
url <- "http://www.r-project.org/Rlogo.png"
lrgbhist(input=url, mode="url")
lrgbhist(input=url, mode="url", endoff=TRUE)
library(imhistR)
url <- "http://www.r-project.org/Rlogo.png"
lrgbhist(input=url, mode="url", endoff=TRUE)
Rlogo <- "http://www.r-project.org/Rlogo.png"
mode="url"
input=Rlogo
endoff=TRUE
hist="histgram"
resize=FALSE
if(grepl(".jpg",  input, fixed = TRUE))   type <- ".jpg"
if(grepl(".jpeg", input, fixed = TRUE))   type <- ".jpeg"
if(grepl(".png",  input, fixed = TRUE))   type <- ".png"
##### set mode: file, url, dir, scraping
current <- getwd()
if(mode=="file") {
datfil <- input; filNum <- 1
} else if(mode=="folder") {
datfil <- c(list.files(path=input, pattern=".jpg"), list.files(path=input, pattern=".png"),
list.files(path=input, pattern=".jpeg") )
filNum <- length(datfil)
} else if(mode=="url") {
downloader::download(input, paste0(current, "/", mode), mode="wb")
datfil <- mode; filNum <- 1
} else if(mode=="scraping") {
type <- ".jpg"
if (!file.exists(paste0(current, "/", mode)))  dir.create(mode)     # folder check
cat(paste0(mode, "folder in ", current, "\n"))  # return message
webinf <- rvest::html(input)
imgnod <- rvest::html_nodes(webinf, "img")
nodtext <- rvest::html_attrs(imgnod)
for(i in 1:length(nodtext)) {
downloader::download(as.character(nodtext[[i]][2]),
sprintf("%s/%s/%s_%02d%s", current, mode, hist, i, type),
mode="wb")
Sys.sleep(3)
}
datfil <- list.files(path=paste0(current, "/", mode), pattern=type)
filNum <- length(nodtext)
}
##### main loop
savedat <- matrix(0, nrow = filNum, ncol = 16)
library(imhistR)
if(grepl(".jpg",  input, fixed = TRUE))   type <- ".jpg"
if(grepl(".jpeg", input, fixed = TRUE))   type <- ".jpeg"
if(grepl(".png",  input, fixed = TRUE))   type <- ".png"
##### set mode: file, url, dir, scraping
current <- getwd()
if(mode=="file") {
datfil <- input; filNum <- 1
} else if(mode=="folder") {
datfil <- c(list.files(path=input, pattern=".jpg"), list.files(path=input, pattern=".png"),
list.files(path=input, pattern=".jpeg") )
filNum <- length(datfil)
} else if(mode=="url") {
downloader::download(input, paste0(current, "/", input), mode="wb")
datfil <- input; filNum <- 1
} else if(mode=="scraping") {
type <- ".jpg"
if (!file.exists(paste0(current, "/", mode)))  dir.create(mode)     # folder check
cat(paste0(mode, "folder in ", current, "\n"))  # return message
webinf <- rvest::html(input)
imgnod <- rvest::html_nodes(webinf, "img")
nodtext <- rvest::html_attrs(imgnod)
for(i in 1:length(nodtext)) {
downloader::download(as.character(nodtext[[i]][2]),
sprintf("%s/%s/%s_%02d%s", current, mode, hist, i, type),
mode="wb")
Sys.sleep(3)
}
datfil <- list.files(path=paste0(current, "/", mode), pattern=type)
filNum <- length(nodtext)
}
downloader::download(input, paste0(current, "/", input), mode="wb")
downloader::download(input, paste0(current, "/", hist), mode="wb")
datfil <- hist; filNum <- 1
if(mode=="folder" || mode=="scraping") {
cat(paste0("Processing ", datfil[f], "(", f, "/", filNum, ")", "...\n"))
}
##### read dat
if(mode=="scraping")  setwd(paste0(current, "/scraping"))
if(mode=="folder") {
if(grepl(".jpg", datfil[f], fixed = TRUE))   type <- ".jpg"
if(grepl(".jpeg", datfil[f], fixed = TRUE))  type <- ".jpeg"
if(grepl(".png", datfil[f], fixed = TRUE))   type <- ".png"
}
if(type==".jpg" || type==".jpeg")   img <- jpeg::readJPEG(datfil[f])
if(type==".png")                    img <- png::readPNG(datfil[f])
if(mode=="url")  file.remove(datfil[f])
##### thumbnail rescale (under 90000 pixel)
dim1 <- dim(img)[1]; dim2 <- dim(img)[2]
if(dim1>300 && dim2>300) {
while(dim1 > 200)  dim1 <- dim1 / 2
while(dim2 > 200)  dim2 <- dim2 / 2
resizep <- 1 / min(dim(img)[1] / dim1, dim(img)[2] / dim2)
redp   <- mmand::rescale(img[,,1], resizep, mmand::mnKernel())
greenp <- mmand::rescale(img[,,2], resizep, mmand::mnKernel())
bluep  <- mmand::rescale(img[,,3], resizep, mmand::mnKernel())
imgp <- array(0, dim = c(dim(redp)[1], dim(redp)[2], 3))
imgp[,,1] <- redp; imgp[,,2] <- greenp; imgp[,,3] <- bluep;
imgp <- (imgp - min(imgp)) / (max(imgp) - min(imgp))
} else {
imgp <- img
}
##### luminance & RGB calculate
if(resize) {
red   <- mmand::rescale(img[,,1], resize, mmand::mnKernel())
green <- mmand::rescale(img[,,2], resize, mmand::mnKernel())
blue  <- mmand::rescale(img[,,3], resize, mmand::mnKernel())
} else {
red <- img[,,1]; green <- img[,,2]; blue  <- img[,,3]
}
luminance <- .298912 * red + .586611 * green + .114478 * blue
dat <- list(luminance, red, green, blue)
##### color settings
val <- c("Luminance", "Red", "Green", "Blue")
hcol <- c("black", "white", "black", "red", "black", "green", "black", "blue")
if(type==".png")                    img <- png::readPNG(datfil[f])
f=1
if(mode=="folder" || mode=="scraping") {
cat(paste0("Processing ", datfil[f], "(", f, "/", filNum, ")", "...\n"))
}
##### read dat
if(mode=="scraping")  setwd(paste0(current, "/scraping"))
if(mode=="folder") {
if(grepl(".jpg", datfil[f], fixed = TRUE))   type <- ".jpg"
if(grepl(".jpeg", datfil[f], fixed = TRUE))  type <- ".jpeg"
if(grepl(".png", datfil[f], fixed = TRUE))   type <- ".png"
}
if(type==".jpg" || type==".jpeg")   img <- jpeg::readJPEG(datfil[f])
if(type==".png")                    img <- png::readPNG(datfil[f])
if(mode=="url")  file.remove(datfil[f])
##### thumbnail rescale (under 90000 pixel)
dim1 <- dim(img)[1]; dim2 <- dim(img)[2]
if(dim1>300 && dim2>300) {
while(dim1 > 200)  dim1 <- dim1 / 2
while(dim2 > 200)  dim2 <- dim2 / 2
resizep <- 1 / min(dim(img)[1] / dim1, dim(img)[2] / dim2)
redp   <- mmand::rescale(img[,,1], resizep, mmand::mnKernel())
greenp <- mmand::rescale(img[,,2], resizep, mmand::mnKernel())
bluep  <- mmand::rescale(img[,,3], resizep, mmand::mnKernel())
imgp <- array(0, dim = c(dim(redp)[1], dim(redp)[2], 3))
imgp[,,1] <- redp; imgp[,,2] <- greenp; imgp[,,3] <- bluep;
imgp <- (imgp - min(imgp)) / (max(imgp) - min(imgp))
} else {
imgp <- img
}
##### luminance & RGB calculate
if(resize) {
red   <- mmand::rescale(img[,,1], resize, mmand::mnKernel())
green <- mmand::rescale(img[,,2], resize, mmand::mnKernel())
blue  <- mmand::rescale(img[,,3], resize, mmand::mnKernel())
} else {
red <- img[,,1]; green <- img[,,2]; blue  <- img[,,3]
}
luminance <- .298912 * red + .586611 * green + .114478 * blue
dat <- list(luminance, red, green, blue)
##### color settings
val <- c("Luminance", "Red", "Green", "Blue")
hcol <- c("black", "white", "black", "red", "black", "green", "black", "blue")
if(resize) {
red   <- mmand::rescale(img[,,1], resize, mmand::mnKernel())
green <- mmand::rescale(img[,,2], resize, mmand::mnKernel())
blue  <- mmand::rescale(img[,,3], resize, mmand::mnKernel())
} else {
red <- img[,,1]; green <- img[,,2]; blue  <- img[,,3]
}
luminance <- .298912 * red + .586611 * green + .114478 * blue
dat <- list(luminance, red, green, blue)
##### color settings
val <- c("Luminance", "Red", "Green", "Blue")
hcol <- c("black", "white", "black", "red", "black", "green", "black", "blue")
p <- list(); maxval <- NULL; imgall <- NULL
imgdat <- tidyr::gather(data.frame(dat[i]), pixel, value)
i=1
imgdat <- tidyr::gather(data.frame(dat[i]), pixel, value)
imgval <- data.frame(imgdat$value[(0.01 <imgdat$value) & (imgdat$value < 0.99)])
imgsta <- c(mean(imgval), sd(imgval), e1071::skewness(imgval, type=2), e1071::kurtosis(imgval, type=2))
imgall <- c(imgall, imgsta)
imgval
mean(imgval)
imgval <- imgdat$value[(0.01 <imgdat$value) & (imgdat$value < 0.99)]
imgsta <- c(mean(imgval), sd(imgval), e1071::skewness(imgval, type=2), e1071::kurtosis(imgval, type=2))
imgall <- c(imgall, imgsta)
imgval <- data.grame(imgval)
imgval <- data.frame(imgval)
head(imgval)
ggplot2::ggplot(imgval, ggplot2::aes(x=imgval, fill=..x..)) +
ggplot2::stat_bin(binwidth = 1/255) +
ggplot2::ylab("Number of pixels") + ggplot2::xlab(val[i]) + ggplot2::xlim(0, 1) +
ggplot2::theme_bw(base_size=16) +
ggplot2::theme(legend.position="", plot.title=ggplot2::element_text(size=14)) +
ggplot2::scale_fill_gradient(low=hcol[2*i-1], high=hcol[2*i]) +
ggplot2::ggtitle(paste0("Mean = ",round(imgsta[1],2), ", SD = ",round(imgsta[2],2),
", Skew = ",round(imgsta[3],2), ", Kurt = ",round(imgsta[4],2)))
library(imhistR)
Rlogo <- "http://www.r-project.org/Rlogo.png"
lrgbhist(input=Rlogo, mode="url", endoff=TRUE)
library(imhistR)
lrgbhist(input=Rlogo, mode="url", endoff=TRUE)
library(imhistR)
lrgbhist(input=Rlogo, mode="url", endoff=TRUE)
labhist(input=Rlogo, mode="url", endoff=TRUE)
hsbhist(input=Rlogo, mode="url", endoff=TRUE)
library(imhistR)
hsbhist(input=Rlogo, mode="url", endoff=TRUE)
library(imhistR)
lrgbhist("lena.jpg")
require("imhistR")
lrgbhist("lena.jpg")
lrgbhist("http://blog-imgs-35-origin.fc2.com/i/m/a/imagingsolution/Lenna.png", mode="url")
?grepl
?list.files
